// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/tvastar/goat/tokens/ent/tokens"
)

// TokensCreate is the builder for creating a Tokens entity.
type TokensCreate struct {
	config
	mutation *TokensMutation
	hooks    []Hook
}

// SetProvider sets the provider field.
func (tc *TokensCreate) SetProvider(s string) *TokensCreate {
	tc.mutation.SetProvider(s)
	return tc
}

// SetUser sets the user field.
func (tc *TokensCreate) SetUser(s string) *TokensCreate {
	tc.mutation.SetUser(s)
	return tc
}

// SetToken sets the token field.
func (tc *TokensCreate) SetToken(s string) *TokensCreate {
	tc.mutation.SetToken(s)
	return tc
}

// Mutation returns the TokensMutation object of the builder.
func (tc *TokensCreate) Mutation() *TokensMutation {
	return tc.mutation
}

// Save creates the Tokens in the database.
func (tc *TokensCreate) Save(ctx context.Context) (*Tokens, error) {
	if _, ok := tc.mutation.Provider(); !ok {
		return nil, &ValidationError{Name: "provider", err: errors.New("ent: missing required field \"provider\"")}
	}
	if _, ok := tc.mutation.User(); !ok {
		return nil, &ValidationError{Name: "user", err: errors.New("ent: missing required field \"user\"")}
	}
	if _, ok := tc.mutation.Token(); !ok {
		return nil, &ValidationError{Name: "token", err: errors.New("ent: missing required field \"token\"")}
	}
	var (
		err  error
		node *Tokens
	)
	if len(tc.hooks) == 0 {
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TokensMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TokensCreate) SaveX(ctx context.Context) *Tokens {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TokensCreate) sqlSave(ctx context.Context) (*Tokens, error) {
	t, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}

func (tc *TokensCreate) createSpec() (*Tokens, *sqlgraph.CreateSpec) {
	var (
		t     = &Tokens{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tokens.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tokens.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Provider(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokens.FieldProvider,
		})
		t.Provider = value
	}
	if value, ok := tc.mutation.User(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokens.FieldUser,
		})
		t.User = value
	}
	if value, ok := tc.mutation.Token(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tokens.FieldToken,
		})
		t.Token = value
	}
	return t, _spec
}
